CIs[3]/2
demux_clean_v0 <- read_csv(paste0(barcode_source_data, "demux_clean_v0.tsv"), col_names = FALSE)
demux_clean_v1 <- read_csv(paste0(barcode_source_data, "demux_clean_v1.tsv"), col_names = FALSE)
# function to return details of read counts
give_deets <- function(demux_clean) {
demux_clean <- demux_clean[6:677,]
demux_clean$seq <- rep(seq(1,7), 96)
demux_clean <- as.data.frame(demux_clean)
counts <- demux_clean %>%
dplyr::filter(seq=="5") # filter barcode counts (all)
counts$X1 <- gsub("</BarcodeCount>","",counts$X1)
counts$X1 <- gsub("<BarcodeCount>","",counts$X1)
counts <- as.data.frame(as.numeric(counts$X1))
colnames(counts) <- "counts"
# set minimum: half the read count of the lower confidence interval (CI set at 0.999)
CIs <- CI(counts$counts,ci = 0.999)
mymin <- CIs[3]/2
a <- counts %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(a), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_a <- counts_transposed %>%
dplyr::select(summary, everything())
counts_a$selection <- "all"
b <- counts %>%
dplyr::filter(counts>mymin) %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(b), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_b <- counts_transposed %>%
dplyr::select(summary, everything())
counts_b$selection <- "without outliers"
fin <- rbind(counts_a, counts_b)
return(fin)
}
counts_v0 <- give_deets(demux_clean_v0)
counts_v1 <- give_deets(demux_clean_v1)
counts_v0
counts_v1 <- give_deets(demux_clean_v1)
counts_v1
demux_clean <- demux_clean_v0[6:677,]
demux_clean$seq <- rep(seq(1,7), 96)
demux_clean <- as.data.frame(demux_clean)
counts <- demux_clean %>%
dplyr::filter(seq=="5") # filter barcode counts (all)
counts$X1 <- gsub("</BarcodeCount>","",counts$X1)
counts$X1 <- gsub("<BarcodeCount>","",counts$X1)
counts <- as.data.frame(as.numeric(counts$X1))
colnames(counts) <- "counts"
# set minimum: half the read count of the lower confidence interval (CI set at 0.999)
CIs <- CI(counts$counts,ci = 0.999)
mymin <- CIs[3]/2
mymin
counts$counts
sort(counts$counts)
mymin
sort(counts$counts)
mymin <- CIs[3]/4
mymin
mymin <- CIs[3]/6
mymin
sort(counts$counts)
mymin <- CIs[3]/10
mymin
sort(counts$counts)
demux_clean <- demux_clean_v1[6:677,]
demux_clean$seq <- rep(seq(1,7), 96)
demux_clean <- as.data.frame(demux_clean)
counts <- demux_clean %>%
dplyr::filter(seq=="5") # filter barcode counts (all)
counts$X1 <- gsub("</BarcodeCount>","",counts$X1)
counts$X1 <- gsub("<BarcodeCount>","",counts$X1)
counts <- as.data.frame(as.numeric(counts$X1))
colnames(counts) <- "counts"
# set minimum: a tenth of the read count of the lower confidence interval (CI set at 0.999)
CIs <- CI(counts$counts,ci = 0.999)
mymin <- CIs[3]/10
mymin
sort(counts$counts)
mymin <- CIs[3]/8
mymin
mymin <- CIs[3]/6
mymin
demux_clean <- demux_clean_v0[6:677,]
demux_clean$seq <- rep(seq(1,7), 96)
demux_clean <- as.data.frame(demux_clean)
counts <- demux_clean %>%
dplyr::filter(seq=="5") # filter barcode counts (all)
counts$X1 <- gsub("</BarcodeCount>","",counts$X1)
counts$X1 <- gsub("<BarcodeCount>","",counts$X1)
counts <- as.data.frame(as.numeric(counts$X1))
colnames(counts) <- "counts"
# set minimum: a sixth of the read count of the lower confidence interval (CI set at 0.999)
CIs <- CI(counts$counts,ci = 0.999)
mymin <- CIs[3]/6
mymin
sort(counts$counts)
a <- counts %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(a), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_a <- counts_transposed %>%
dplyr::select(summary, everything())
counts_a$selection <- "all"
b <- counts %>%
dplyr::filter(counts>mymin) %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(b), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_b <- counts_transposed %>%
dplyr::select(summary, everything())
counts_b$selection <- "without outliers"
fin <- rbind(counts_a, counts_b)
fin
demux_clean <- demux_clean_v1[6:677,]
demux_clean$seq <- rep(seq(1,7), 96)
demux_clean <- as.data.frame(demux_clean)
counts <- demux_clean %>%
dplyr::filter(seq=="5") # filter barcode counts (all)
counts$X1 <- gsub("</BarcodeCount>","",counts$X1)
counts$X1 <- gsub("<BarcodeCount>","",counts$X1)
counts <- as.data.frame(as.numeric(counts$X1))
colnames(counts) <- "counts"
# set minimum: a sixth of the read count of the lower confidence interval (CI set at 0.999)
CIs <- CI(counts$counts,ci = 0.999)
mymin <- CIs[3]/6
mymin
sort(counts$counts)
a <- counts %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(a), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_a <- counts_transposed %>%
dplyr::select(summary, everything())
counts_a$selection <- "all"
b <- counts %>%
dplyr::filter(counts>mymin) %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(b), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_b <- counts_transposed %>%
dplyr::select(summary, everything())
counts_b$selection <- "without outliers"
fin <- rbind(counts_a, counts_b)
fin
sort(counts$counts)
mymin
mymin
mymin <- CIs[3]/8
mymin
mymin <- CIs[3]/4
mymin
demux_clean <- demux_clean_v1[6:677,]
demux_clean$seq <- rep(seq(1,7), 96)
demux_clean <- as.data.frame(demux_clean)
counts <- demux_clean %>%
dplyr::filter(seq=="5") # filter barcode counts (all)
counts$X1 <- gsub("</BarcodeCount>","",counts$X1)
counts$X1 <- gsub("<BarcodeCount>","",counts$X1)
counts <- as.data.frame(as.numeric(counts$X1))
colnames(counts) <- "counts"
# set minimum: a fourth of the read count of the lower confidence interval (CI set at 0.999)
CIs <- CI(counts$counts,ci = 0.999)
mymin <- CIs[3]/4
mymin
sort(counts$counts)
a <- counts %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(a), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_a <- counts_transposed %>%
dplyr::select(summary, everything())
counts_a$selection <- "all"
b <- counts %>%
dplyr::filter(counts>mymin) %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(b), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_b <- counts_transposed %>%
dplyr::select(summary, everything())
counts_b$selection <- "without outliers"
fin <- rbind(counts_a, counts_b)
return(fin)
fin
demux_clean <- demux_clean_v0[6:677,]
demux_clean$seq <- rep(seq(1,7), 96)
demux_clean <- as.data.frame(demux_clean)
counts <- demux_clean %>%
dplyr::filter(seq=="5") # filter barcode counts (all)
counts$X1 <- gsub("</BarcodeCount>","",counts$X1)
counts$X1 <- gsub("<BarcodeCount>","",counts$X1)
counts <- as.data.frame(as.numeric(counts$X1))
colnames(counts) <- "counts"
# set minimum: a fourth of the read count of the lower confidence interval (CI set at 0.999)
CIs <- CI(counts$counts,ci = 0.999)
mymin <- CIs[3]/4
mymin
sort(counts$counts)
a <- counts %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(a), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_a <- counts_transposed %>%
dplyr::select(summary, everything())
counts_a$selection <- "all"
b <- counts %>%
dplyr::filter(counts>mymin) %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(b), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_b <- counts_transposed %>%
dplyr::select(summary, everything())
counts_b$selection <- "without outliers"
fin <- rbind(counts_a, counts_b)
fin
demux_clean_v0 <- read_csv(paste0(barcode_source_data, "demux_clean_v0.tsv"), col_names = FALSE)
demux_clean_v1 <- read_csv(paste0(barcode_source_data, "demux_clean_v1.tsv"), col_names = FALSE)
# function to return details of read counts
give_deets <- function(demux_clean) {
demux_clean <- demux_clean[6:677,]
demux_clean$seq <- rep(seq(1,7), 96)
demux_clean <- as.data.frame(demux_clean)
counts <- demux_clean %>%
dplyr::filter(seq=="5") # filter barcode counts (all)
counts$X1 <- gsub("</BarcodeCount>","",counts$X1)
counts$X1 <- gsub("<BarcodeCount>","",counts$X1)
counts <- as.data.frame(as.numeric(counts$X1))
colnames(counts) <- "counts"
# set minimum: a fourth of the read count of the lower confidence interval (CI set at 0.999)
CIs <- CI(counts$counts,ci = 0.999)
mymin <- CIs[3]/4
mymin
sort(counts$counts)
a <- counts %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(a), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_a <- counts_transposed %>%
dplyr::select(summary, everything())
counts_a$selection <- "all"
b <- counts %>%
dplyr::filter(counts>mymin) %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(b), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_b <- counts_transposed %>%
dplyr::select(summary, everything())
counts_b$selection <- "without outliers"
fin <- rbind(counts_a, counts_b)
return(fin)
}
counts_v0 <- give_deets(demux_clean_v0)
counts_v1 <- give_deets(demux_clean_v1)
# Layout to split the screen
layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,8))
# Draw the boxplot and the histogram
par(mar=c(0, 6, 1.1, 2))
boxplot(counts_v0$counts,
main = NULL,
xlab = NULL,
ylab = NULL,
axes = FALSE,
col = "grey",
border = "black",
horizontal = TRUE,
notch = TRUE
)
counts_v0
demux_clean_v0 <- read_csv(paste0(barcode_source_data, "demux_clean_v0.tsv"), col_names = FALSE)
demux_clean_v1 <- read_csv(paste0(barcode_source_data, "demux_clean_v1.tsv"), col_names = FALSE)
# function to return details of read counts
give_counts <- function(demux_clean) {
demux_clean <- demux_clean[6:677,]
demux_clean$seq <- rep(seq(1,7), 96)
demux_clean <- as.data.frame(demux_clean)
counts <- demux_clean %>%
dplyr::filter(seq=="5") # filter barcode counts (all)
counts$X1 <- gsub("</BarcodeCount>","",counts$X1)
counts$X1 <- gsub("<BarcodeCount>","",counts$X1)
counts <- as.data.frame(as.numeric(counts$X1))
colnames(counts) <- "counts"
return(counts)
}
demux_clean_v0 <- read_csv(paste0(barcode_source_data, "demux_clean_v0.tsv"), col_names = FALSE)
demux_clean_v1 <- read_csv(paste0(barcode_source_data, "demux_clean_v1.tsv"), col_names = FALSE)
# function to return details of read counts
give_counts <- function(demux_clean) {
demux_clean <- demux_clean[6:677,]
demux_clean$seq <- rep(seq(1,7), 96)
demux_clean <- as.data.frame(demux_clean)
counts <- demux_clean %>%
dplyr::filter(seq=="5") # filter barcode counts (all)
counts$X1 <- gsub("</BarcodeCount>","",counts$X1)
counts$X1 <- gsub("<BarcodeCount>","",counts$X1)
counts <- as.data.frame(as.numeric(counts$X1))
colnames(counts) <- "counts"
return(counts)
}
# function to return details of read counts
give_deets <- function(counts) {
# set minimum: a fourth of the read count of the lower confidence interval (CI set at 0.999)
CIs <- CI(counts$counts,ci = 0.999)
mymin <- CIs[3]/4
mymin
sort(counts$counts)
a <- counts %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(a), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_a <- counts_transposed %>%
dplyr::select(summary, everything())
counts_a$selection <- "all"
b <- counts %>%
dplyr::filter(counts>mymin) %>%
dplyr::summarise(barcodes_combos=n(),
Min=min(counts),
Mean=mean(counts),
Median=median(counts),
Sd=sd(counts),
Max=max(counts),
Sum=sum(counts),
Coeff.variation=sd(counts)/mean(counts))
counts_transposed <- as.data.frame(t(b), make.names = TRUE)
counts_transposed$summary <- rownames(counts_transposed)
colnames(counts_transposed) <- c("value","summary")
counts_b <- counts_transposed %>%
dplyr::select(summary, everything())
counts_b$selection <- "without outliers"
fin <- rbind(counts_a, counts_b)
return(fin)
}
counts_v0 <- give_counts(demux_clean_v0)
counts_v1 <- give_counts(demux_clean_v1)
deets_v0 <- give_deets(counts_v0)
deets_v1 <- give_deets(counts_v1)
deets_v0
deets_v1
counts_v0
# Layout to split the screen
layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,8))
# Draw the boxplot and the histogram
par(mar=c(0, 6, 1.1, 2))
boxplot(counts_v0$counts,
main = NULL,
xlab = NULL,
ylab = NULL,
axes = FALSE,
col = "grey",
border = "black",
horizontal = TRUE,
notch = TRUE
)
#par(mar=c(4, 3.1, 1.1, 2.1))
#bootm left top right
par(mar=c(5,6,4,2)+0.1)
#x and y labels font size with
opar=par(ps=14)
hist(counts_v0$counts,
breaks = seq(from=1, to=10000, by=500),
main = NULL, xlab = "barcode count", ylab = "Frequency")
# Layout to split the screen
layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,8))
# Draw the boxplot and the histogram
par(mar=c(0, 6, 1.1, 2))
boxplot(counts_v0$counts, ylim=c(0,200000),
main = NULL,
xlab = NULL,
ylab = NULL,
axes = FALSE,
col = "grey",
border = "black",
horizontal = TRUE,
notch = TRUE
)
boxplot(counts_v1$counts, ylim=c(0,200000),
main = NULL,
xlab = NULL,
ylab = NULL,
axes = FALSE,
col = "grey",
border = "black",
horizontal = TRUE,
notch = TRUE
)
# Layout to split the screen
layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,8))
# Layout to split the screen
layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,8))
# Draw the boxplot and the histogram
par(mar=c(0, 6, 1.1, 2))
boxplot(counts_v1$counts, ylim=c(0,200000),
main = NULL,
xlab = NULL,
ylab = NULL,
axes = FALSE,
col = "grey",
border = "black",
horizontal = TRUE,
notch = TRUE
)
hist(counts_v1$counts, xlim=c(0,200000),
breaks = seq(from=1, to=200000, by=10000),
main = NULL, xlab = "barcode count", ylab = "Frequency")
fwrite(x=deets_v0, file=paste0(barcode_libs,"barcodes_v0_summary.csv"))
fwrite(x=deets_v1, file=paste0(barcode_libs,"barcodes_v1_summary.csv"))
complete_barcodes_v0
demux_clean_v0
911*2
